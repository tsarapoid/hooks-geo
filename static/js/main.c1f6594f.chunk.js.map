{"version":3,"sources":["map.js","usePosition.js","demo.js","index.js"],"names":["osm","x","y","z","s","String","fromCharCode","Mapp","latitude","longitude","provider","center","width","height","zoom","minZoom","maxZoom","zoomSnap","animate","animating","metaWheelZoom","twoFingerDrag","mouseEvents","touchEvents","anchor","payload","onClick","event","defaultSettings","enableHighAccuracy","timeout","Infinity","maximumAge","Demo","watch","settings","console","log","useState","position","setPosition","error","setError","onChange","coords","timestamp","accuracy","onError","message","useEffect","navigator","geolocation","watcher","watchPosition","getCurrentPosition","clearWatch","usePosition","date","Date","time","toTimeString","toLocaleString","loader","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAKMA,EAAM,SAACC,EAAGC,EAAGC,GACf,IAAMC,EAAIC,OAAOC,aAAa,IAAML,EAAIC,EAAIC,GAAK,GACjD,MAAM,WAAN,OAAkBC,EAAlB,mCAA8CD,EAA9C,YAAmDF,EAAnD,YAAwDC,EAAxD,SA2CWK,EA3BK,SAAC,GAAD,QAAEC,gBAAF,MAAa,QAAb,MAAyBC,iBAAzB,MAAqC,QAArC,SACnB,kBAAC,IAAD,CACCC,SAAUV,EACVW,OAAQ,CAACH,EAAUC,GAClBG,MAAO,IACRC,OAAQ,IACRC,KAAM,GACNC,QAAS,EACTC,QAAS,GACTC,UAAU,EACVC,SAAS,EACTC,WAAW,EACXC,eAAe,EACfC,eAAe,EACfC,aAAa,EACbC,aAAa,GAEb,kBAAC,IAAD,CAAQC,OAAQ,CAAChB,EAAUC,GAC1BgB,QAAS,EAAGC,QAAS,YAAgC,EAA7BC,MAA6B,EAAtBH,OAAsB,EAAdC,c,cCvCnCG,EAAkB,CACvBC,oBAAoB,EACpBC,QAASC,IACTC,WAAY,GC6BCC,EA9BK,SAAC,GAAuB,IAAD,EDIf,WAAgD,IAA/CC,EAA8C,wDAA/BC,EAA+B,uDAApBP,EAGtDQ,QAAQC,IAAIH,EAAOC,GAHuD,MAM1CG,mBAAS,IANiC,mBAMnEC,EANmE,KAMzDC,EANyD,OAO/CF,mBAAS,MAPsC,mBAOlEG,EAPkE,KAO3DC,EAP2D,KASnEC,EAAW,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UACzBL,EAAY,CACVhC,SAAUoC,EAAOpC,SACjBC,UAAWmC,EAAOnC,UAClBqC,SAAUF,EAAOE,SACjBD,eAIEE,EAAU,SAACN,GACfC,EAASD,EAAMO,UA2BjB,OAxBAC,qBAAU,WACR,GAAKC,WAAcA,UAAUC,YAA7B,CAKA,IAAIC,EAAU,KAQhB,OAPMlB,EACFkB,EACEF,UAAUC,YAAYE,cAAcV,EAAUI,EAASZ,GAEzDe,UAAUC,YAAYG,mBAAmBX,EAAUI,EAASZ,GAGzD,kBAAMiB,GAAWF,UAAUC,YAAYI,WAAWH,IAZrDV,EAAS,kCAaX,CAACR,EAAOC,IASH,eAAII,EAAX,CAAqBE,UC3CjBe,CAPqC,EAArBtB,MAAqB,EAAdC,UAEzB3B,EAFuC,EAEvCA,SACAC,EAHuC,EAGvCA,UACAoC,EAJuC,EAIvCA,UACAC,EALuC,EAKvCA,SACAL,EANuC,EAMvCA,MAGGgB,EAAO,IAAIC,KAAKb,GAChBc,EAAOF,EAAKG,eAClBxB,QAAQC,IAAIoB,EAAKI,kBAEhB,IAAMC,EAAUtD,GAAaiC,EACL,KAAvB,oBAED,OACE,iDACajC,EAAS,6BADtB,cAEcC,EAAU,6BAFxB,cAGWkD,EAAK,6BAHhB,aAIab,GAAQ,UAAOA,EAAP,MAAoB,6BAJzC,UAKUL,EALV,IAKkBqB,EACpB,6BACA,6BACA,kBAAC,EAAD,CAAMtD,SAAYA,EAAUC,UAAaA,OCxB3CsD,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEA,kBAAC,EAAD,CAAM/B,OAAO,EACbC,SACC,CAACN,oBAAoB,EACrBC,QAASC,IACTC,WAAY,MAGbkC,SAASC,eAAe,U","file":"static/js/main.c1f6594f.chunk.js","sourcesContent":["import React from 'react'\r\nimport Map from 'pigeon-maps'\r\nimport Marker from 'pigeon-marker'\r\n/* import Overlay from 'pigeon-overlay' */\r\n\r\nconst osm = (x, y, z) => {\r\n    const s = String.fromCharCode(97 + (x + y + z) % 3)\r\n    return `https://${s}.tile.openstreetmap.org/${z}/${x}/${y}.png`\r\n}\r\n\r\n/* export const providers = {\r\n  osm: (x, y, z) => {\r\n    const s = String.fromCharCode(97 + (x + y + z) % 3)\r\n    return `https://${s}.tile.openstreetmap.org/${z}/${x}/${y}.png`\r\n  },\r\n  stamenTerrain: (x, y, z, dpr) => {\r\n    return `https://stamen-tiles.a.ssl.fastly.net/terrain/${z}/${x}/${y}${dpr >= 2 ? '@2x' : ''}.jpg`\r\n  },\r\n  stamenToner: (x, y, z, dpr) => {\r\n    return `https://stamen-tiles.a.ssl.fastly.net/toner/${z}/${x}/${y}${dpr >= 2 ? '@2x' : ''}.png`\r\n  }\r\n} */\r\n\r\nexport const Mapp = ({latitude = 45.0428000, longitude = 41.9734000}) => (\r\n\t<Map\r\n\t\tprovider={osm}\r\n\t\tcenter={[latitude, longitude]}\r\n \t\twidth={300}\r\n\t\theight={200}\r\n\t\tzoom={13}\r\n\t\tminZoom={1}\r\n\t\tmaxZoom={18}\r\n\t\tzoomSnap={true}\r\n\t\tanimate={true}\r\n\t\tanimating={false}\r\n\t\tmetaWheelZoom={false}\r\n\t\ttwoFingerDrag={false}\r\n\t\tmouseEvents={true}\r\n\t\ttouchEvents={true}\r\n\t>\r\n\t\t<Marker anchor={[latitude, longitude]}\r\n\t\t\tpayload={1} onClick={({ event, anchor, payload }) => {}}\r\n\t\t/>\r\n\r\n{/*\t<Overlay anchor={[50.879, 4.6997]} offset={[120, 79]}>\r\n      <img src='pigeon.jpg' width={240} height={158} alt='' />\r\n    </Overlay> */}\r\n  </Map>\r\n)\r\n\r\nexport default Mapp","import {useState, useEffect} from 'react';\n\n\tconst defaultSettings = {\n  enableHighAccuracy: false,\n  timeout: Infinity,\n  maximumAge: 0,\n};\n\n\texport const usePosition = (watch = false, settings = defaultSettings) => {\n//export const usePosition = (watch, settings) => {\n\n\tconsole.log(watch, settings);\n//console.log(watch, JSON.stringify(settings));\n\n\tconst [position, setPosition] = useState({});\n  const [error, setError] = useState(null);\n\n  const onChange = ({coords, timestamp}) => {\n    setPosition({\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n      accuracy: coords.accuracy,\n      timestamp,\n    });\n  };\n\n  const onError = (error) => {\n    setError(error.message);\n  };\n\n  useEffect(() => {\n    if (!navigator || !navigator.geolocation) {\n      setError('Geolocation is not supported');\n      return;\n    }\n\n    let watcher = null;\n    if (watch) {\n      watcher =\n        navigator.geolocation.watchPosition(onChange, onError, settings);\n    } else {\n      navigator.geolocation.getCurrentPosition(onChange, onError, settings);\n    }\n\t\n\t\treturn () => watcher && navigator.geolocation.clearWatch(watcher);\n\t}, [watch, settings]);\n\t\n\t/*return () => watcher && navigator.geolocation.clearWatch(watcher);\n  }, [\n    settings.enableHighAccuracy,\n    settings.timeout,\n    settings.maximumAge,\n\t]);*/\n\n  return {...position, error};\n};\n","import React from 'react';\nimport Mapp from './map';\nimport {usePosition} from './usePosition';\n\nexport const Demo = ({watch, settings}) => {\n  const {\n    latitude,\n    longitude,\n    timestamp,\n    accuracy,\n    error,\n  } = usePosition(watch, settings);\n\n\tconst date = new Date(timestamp)\n\tconst time = date.toTimeString()\n\tconsole.log(date.toLocaleString());\n\n  const loader = !latitude && !error ?\n\t\t(\"Fetching location\") : null;\n\t\n  return (\n    <>\n      latitude: {latitude}<br/>\n      longitude: {longitude}<br/>\n\t\t\ttimestamp: {time}<br/>\n      accuracy: {accuracy && `${accuracy} m`}<br/>\n      error: {error} {loader}\n\t\t<br/>\n\t\t<br/>\n\t\t<Mapp latitude = {latitude} longitude = {longitude}/> \n    </>\n  );\n};\n\nexport default Demo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Demo from './demo';\n\nReactDOM.render(\n  <React.StrictMode>\n\t\t{/* <Demo/> */}\n\t\t<Demo watch={true}\n\t\tsettings={\n\t\t\t{enableHighAccuracy: true,\n\t\t\ttimeout: Infinity,\n\t\t\tmaximumAge: 0}\n\t\t}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n/*const defaultSettings = {\n  enableHighAccuracy: false,\n  timeout: Infinity,\n  maximumAge: 0,\n};*/"],"sourceRoot":""}